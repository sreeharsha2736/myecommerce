{"ast":null,"code":"import Axios from \"axios\";\nimport Cookie from \"js-cookie\";\nimport { USER_SIGNIN_REQUEST, USER_SIGNIN_SUCCESS, USER_SIGNIN_FAIL, USER_REGISTER_REQUEST, USER_REGISTER_SUCCESS, USER_REGISTER_FAIL, USER_LOGOUT, USER_UPDATE_REQUEST, USER_UPDATE_SUCCESS, USER_UPDATE_FAIL } from \"../constants/userConstants\";\n\nconst update = ({\n  userId,\n  name,\n  email,\n  password\n}) => async (dispatch, getState) => {\n  const {\n    userSignin: {\n      userInfo\n    }\n  } = getState();\n  dispatch({\n    type: USER_UPDATE_REQUEST,\n    payload: {\n      userId,\n      name,\n      email,\n      password\n    }\n  });\n\n  try {\n    const {\n      data\n    } = await Axios.put(\"/api/users/\" + userId, {\n      name,\n      email,\n      password\n    }, {\n      headers: {\n        Authorization: \"Bearer \" + userInfo.token\n      }\n    });\n    dispatch({\n      type: USER_UPDATE_SUCCESS,\n      payload: data\n    });\n    Cookie.set(\"userInfo\", JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_UPDATE_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nconst signin = (email, password) => async dispatch => {\n  dispatch({\n    type: USER_SIGNIN_REQUEST,\n    payload: {\n      email,\n      password\n    }\n  });\n\n  try {\n    const {\n      data\n    } = await Axios.post(\"Signin\", {\n      email,\n      password\n    });\n    dispatch({\n      type: USER_SIGNIN_SUCCESS,\n      payload: data\n    });\n    Cookie.set(\"userInfo\", JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_SIGNIN_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nconst register = (name, email, password) => async dispatch => {\n  dispatch({\n    type: USER_REGISTER_REQUEST,\n    payload: {\n      name,\n      email,\n      password\n    }\n  });\n\n  try {\n    const {\n      data\n    } = await Axios.post(\"/api/users/register\", {\n      name,\n      email,\n      password\n    });\n    dispatch({\n      type: USER_REGISTER_SUCCESS,\n      payload: data\n    });\n    Cookie.set(\"userInfo\", JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_REGISTER_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nconst logout = () => dispatch => {\n  Cookie.remove(\"userInfo\");\n  dispatch({\n    type: USER_LOGOUT\n  });\n};\n\nexport { signin, register, logout, update };","map":{"version":3,"sources":["C:/Users/SONU/Desktop/github/ecommerce/frontend/src/actions/userActions.js"],"names":["Axios","Cookie","USER_SIGNIN_REQUEST","USER_SIGNIN_SUCCESS","USER_SIGNIN_FAIL","USER_REGISTER_REQUEST","USER_REGISTER_SUCCESS","USER_REGISTER_FAIL","USER_LOGOUT","USER_UPDATE_REQUEST","USER_UPDATE_SUCCESS","USER_UPDATE_FAIL","update","userId","name","email","password","dispatch","getState","userSignin","userInfo","type","payload","data","put","headers","Authorization","token","set","JSON","stringify","error","message","signin","post","register","logout","remove"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,SACEC,mBADF,EAEEC,mBAFF,EAGEC,gBAHF,EAIEC,qBAJF,EAKEC,qBALF,EAMEC,kBANF,EAOEC,WAPF,EAQEC,mBARF,EASEC,mBATF,EAUEC,gBAVF,QAWO,4BAXP;;AAaA,MAAMC,MAAM,GAAG,CAAC;AAAEC,EAAAA,MAAF;AAAUC,EAAAA,IAAV;AAAgBC,EAAAA,KAAhB;AAAuBC,EAAAA;AAAvB,CAAD,KAAuC,OACpDC,QADoD,EAEpDC,QAFoD,KAGjD;AACH,QAAM;AACJC,IAAAA,UAAU,EAAE;AAAEC,MAAAA;AAAF;AADR,MAEFF,QAAQ,EAFZ;AAGAD,EAAAA,QAAQ,CAAC;AACPI,IAAAA,IAAI,EAAEZ,mBADC;AAEPa,IAAAA,OAAO,EAAE;AAAET,MAAAA,MAAF;AAAUC,MAAAA,IAAV;AAAgBC,MAAAA,KAAhB;AAAuBC,MAAAA;AAAvB;AAFF,GAAD,CAAR;;AAIA,MAAI;AACF,UAAM;AAAEO,MAAAA;AAAF,QAAW,MAAMvB,KAAK,CAACwB,GAAN,CACrB,gBAAgBX,MADK,EAErB;AAAEC,MAAAA,IAAF;AAAQC,MAAAA,KAAR;AAAeC,MAAAA;AAAf,KAFqB,EAGrB;AACES,MAAAA,OAAO,EAAE;AACPC,QAAAA,aAAa,EAAE,YAAYN,QAAQ,CAACO;AAD7B;AADX,KAHqB,CAAvB;AASAV,IAAAA,QAAQ,CAAC;AAAEI,MAAAA,IAAI,EAAEX,mBAAR;AAA6BY,MAAAA,OAAO,EAAEC;AAAtC,KAAD,CAAR;AACAtB,IAAAA,MAAM,CAAC2B,GAAP,CAAW,UAAX,EAAuBC,IAAI,CAACC,SAAL,CAAeP,IAAf,CAAvB;AACD,GAZD,CAYE,OAAOQ,KAAP,EAAc;AACdd,IAAAA,QAAQ,CAAC;AAAEI,MAAAA,IAAI,EAAEV,gBAAR;AAA0BW,MAAAA,OAAO,EAAES,KAAK,CAACC;AAAzC,KAAD,CAAR;AACD;AACF,CA1BD;;AA4BA,MAAMC,MAAM,GAAG,CAAClB,KAAD,EAAQC,QAAR,KAAqB,MAAOC,QAAP,IAAoB;AACtDA,EAAAA,QAAQ,CAAC;AAAEI,IAAAA,IAAI,EAAEnB,mBAAR;AAA6BoB,IAAAA,OAAO,EAAE;AAAEP,MAAAA,KAAF;AAASC,MAAAA;AAAT;AAAtC,GAAD,CAAR;;AACA,MAAI;AACF,UAAM;AAAEO,MAAAA;AAAF,QAAW,MAAMvB,KAAK,CAACkC,IAAN,CAAW,QAAX,EAAqB;AAAEnB,MAAAA,KAAF;AAASC,MAAAA;AAAT,KAArB,CAAvB;AACAC,IAAAA,QAAQ,CAAC;AAAEI,MAAAA,IAAI,EAAElB,mBAAR;AAA6BmB,MAAAA,OAAO,EAAEC;AAAtC,KAAD,CAAR;AACAtB,IAAAA,MAAM,CAAC2B,GAAP,CAAW,UAAX,EAAuBC,IAAI,CAACC,SAAL,CAAeP,IAAf,CAAvB;AACD,GAJD,CAIE,OAAOQ,KAAP,EAAc;AACdd,IAAAA,QAAQ,CAAC;AAAEI,MAAAA,IAAI,EAAEjB,gBAAR;AAA0BkB,MAAAA,OAAO,EAAES,KAAK,CAACC;AAAzC,KAAD,CAAR;AACD;AACF,CATD;;AAWA,MAAMG,QAAQ,GAAG,CAACrB,IAAD,EAAOC,KAAP,EAAcC,QAAd,KAA2B,MAAOC,QAAP,IAAoB;AAC9DA,EAAAA,QAAQ,CAAC;AAAEI,IAAAA,IAAI,EAAEhB,qBAAR;AAA+BiB,IAAAA,OAAO,EAAE;AAAER,MAAAA,IAAF;AAAQC,MAAAA,KAAR;AAAeC,MAAAA;AAAf;AAAxC,GAAD,CAAR;;AACA,MAAI;AACF,UAAM;AAAEO,MAAAA;AAAF,QAAW,MAAMvB,KAAK,CAACkC,IAAN,CAAW,qBAAX,EAAkC;AACvDpB,MAAAA,IADuD;AAEvDC,MAAAA,KAFuD;AAGvDC,MAAAA;AAHuD,KAAlC,CAAvB;AAKAC,IAAAA,QAAQ,CAAC;AAAEI,MAAAA,IAAI,EAAEf,qBAAR;AAA+BgB,MAAAA,OAAO,EAAEC;AAAxC,KAAD,CAAR;AACAtB,IAAAA,MAAM,CAAC2B,GAAP,CAAW,UAAX,EAAuBC,IAAI,CAACC,SAAL,CAAeP,IAAf,CAAvB;AACD,GARD,CAQE,OAAOQ,KAAP,EAAc;AACdd,IAAAA,QAAQ,CAAC;AAAEI,MAAAA,IAAI,EAAEd,kBAAR;AAA4Be,MAAAA,OAAO,EAAES,KAAK,CAACC;AAA3C,KAAD,CAAR;AACD;AACF,CAbD;;AAeA,MAAMI,MAAM,GAAG,MAAOnB,QAAD,IAAc;AACjChB,EAAAA,MAAM,CAACoC,MAAP,CAAc,UAAd;AACApB,EAAAA,QAAQ,CAAC;AAAEI,IAAAA,IAAI,EAAEb;AAAR,GAAD,CAAR;AACD,CAHD;;AAIA,SAASyB,MAAT,EAAiBE,QAAjB,EAA2BC,MAA3B,EAAmCxB,MAAnC","sourcesContent":["import Axios from \"axios\";\r\nimport Cookie from \"js-cookie\";\r\nimport {\r\n  USER_SIGNIN_REQUEST,\r\n  USER_SIGNIN_SUCCESS,\r\n  USER_SIGNIN_FAIL,\r\n  USER_REGISTER_REQUEST,\r\n  USER_REGISTER_SUCCESS,\r\n  USER_REGISTER_FAIL,\r\n  USER_LOGOUT,\r\n  USER_UPDATE_REQUEST,\r\n  USER_UPDATE_SUCCESS,\r\n  USER_UPDATE_FAIL,\r\n} from \"../constants/userConstants\";\r\n\r\nconst update = ({ userId, name, email, password }) => async (\r\n  dispatch,\r\n  getState\r\n) => {\r\n  const {\r\n    userSignin: { userInfo },\r\n  } = getState();\r\n  dispatch({\r\n    type: USER_UPDATE_REQUEST,\r\n    payload: { userId, name, email, password },\r\n  });\r\n  try {\r\n    const { data } = await Axios.put(\r\n      \"/api/users/\" + userId,\r\n      { name, email, password },\r\n      {\r\n        headers: {\r\n          Authorization: \"Bearer \" + userInfo.token,\r\n        },\r\n      }\r\n    );\r\n    dispatch({ type: USER_UPDATE_SUCCESS, payload: data });\r\n    Cookie.set(\"userInfo\", JSON.stringify(data));\r\n  } catch (error) {\r\n    dispatch({ type: USER_UPDATE_FAIL, payload: error.message });\r\n  }\r\n};\r\n\r\nconst signin = (email, password) => async (dispatch) => {\r\n  dispatch({ type: USER_SIGNIN_REQUEST, payload: { email, password } });\r\n  try {\r\n    const { data } = await Axios.post(\"Signin\", { email, password });\r\n    dispatch({ type: USER_SIGNIN_SUCCESS, payload: data });\r\n    Cookie.set(\"userInfo\", JSON.stringify(data));\r\n  } catch (error) {\r\n    dispatch({ type: USER_SIGNIN_FAIL, payload: error.message });\r\n  }\r\n};\r\n\r\nconst register = (name, email, password) => async (dispatch) => {\r\n  dispatch({ type: USER_REGISTER_REQUEST, payload: { name, email, password } });\r\n  try {\r\n    const { data } = await Axios.post(\"/api/users/register\", {\r\n      name,\r\n      email,\r\n      password,\r\n    });\r\n    dispatch({ type: USER_REGISTER_SUCCESS, payload: data });\r\n    Cookie.set(\"userInfo\", JSON.stringify(data));\r\n  } catch (error) {\r\n    dispatch({ type: USER_REGISTER_FAIL, payload: error.message });\r\n  }\r\n};\r\n\r\nconst logout = () => (dispatch) => {\r\n  Cookie.remove(\"userInfo\");\r\n  dispatch({ type: USER_LOGOUT });\r\n};\r\nexport { signin, register, logout, update };\r\n"]},"metadata":{},"sourceType":"module"}